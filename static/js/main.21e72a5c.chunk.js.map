{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","sort","goodA","goodB","ALPABET","localeCompare","LENGTH","length","Error","getReorderedGoods","reverse","isResetButtonVisible","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA+BE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA5BD,SACLC,EACAL,GAEA,IAAMI,EAAY,YAAOC,GAkBzB,OAhBAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQR,GACN,KAAKL,EAASc,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,KAAKjB,EAASI,KACZ,OAAO,EAET,QACE,MAAM,IAAIc,MAAM,mBAIfT,EAMcU,CACnBlB,EACAI,GAGEE,GACFE,EAAaW,UAGf,IAAMC,EAAuBhB,IAAaL,EAASI,MAAQG,EAmB3D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAAYnB,IAAaL,EAASc,UAEpCW,QAzBW,WACjBnB,EAAYN,EAASc,UAmBjB,iCAUA,wBACES,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAAYnB,IAAaL,EAASgB,SAEpCS,QA/Ba,WACnBnB,EAAYN,EAASgB,SAyBjB,4BAUA,wBACEO,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAajB,IAEfkB,QArCa,WACnBjB,GAAeD,IA+BX,qBASEc,GACA,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAzCI,WACZnB,EAAYN,EAASI,MACrBI,GAAc,IAoCR,sBAUJ,6BACGC,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC1HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.21e72a5c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((goodA, goodB) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return goodA.localeCompare(goodB);\n\n      case SortType.LENGTH:\n        return goodA.length - goodB.length;\n\n      case SortType.NONE:\n        return 0;\n\n      default:\n        throw new Error('Wrong type!');\n    }\n  });\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n  );\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  const isResetButtonVisible = sortType !== SortType.NONE || isReversed;\n\n  const sortByName = () => {\n    setSortType(SortType.ALPABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverseGoods = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortType !== SortType.ALPABET,\n          })}\n          onClick={sortByName}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={reverseGoods}\n        >\n          Reverse\n        </button>\n        { isResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}